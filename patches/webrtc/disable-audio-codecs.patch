Disable unused audio codecs

Signal only uses the Opus codec. Therefore, not adding the other codecs
to the runtime list. Also disabling CN (comfort noise) since it is not
needed for Opus and telephone-events, since there is no DTMF in the
Signal clients.

The patch simply comments out some code sections.
---
 api/audio_codecs/L16/audio_decoder_L16.cc         |    2 +-
 api/audio_codecs/L16/audio_encoder_L16.cc         |    2 +-
 api/audio_codecs/g711/audio_decoder_g711.cc       |    6 ++---
 api/audio_codecs/g711/audio_encoder_g711.cc       |    6 ++---
 api/audio_codecs/g722/audio_decoder_g722.cc       |    2 +-
 api/audio_codecs/g722/audio_encoder_g722.cc       |    6 ++---
 api/audio_codecs/ilbc/audio_decoder_ilbc.cc       |    2 +-
 api/audio_codecs/ilbc/audio_encoder_ilbc.cc       |    6 ++---
 api/audio_codecs/isac/audio_decoder_isac_fix.cc   |    2 +-
 api/audio_codecs/isac/audio_decoder_isac_float.cc |    4 ++-
 api/audio_codecs/isac/audio_encoder_isac_fix.cc   |    6 ++---
 api/audio_codecs/isac/audio_encoder_isac_float.cc |   10 ++++----
 media/engine/webrtc_voice_engine.cc               |   28 +++++++++++----------
 13 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/api/audio_codecs/L16/audio_decoder_L16.cc b/api/audio_codecs/L16/audio_decoder_L16.cc
index 57c9e76889..8a498ef17f 100644
--- a/api/audio_codecs/L16/audio_decoder_L16.cc
+++ b/api/audio_codecs/L16/audio_decoder_L16.cc
@@ -31,7 +31,7 @@ absl::optional<AudioDecoderL16::Config> AudioDecoderL16::SdpToConfig(
 
 void AudioDecoderL16::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  Pcm16BAppendSupportedCodecSpecs(specs);
+  // Pcm16BAppendSupportedCodecSpecs(specs);
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderL16::MakeAudioDecoder(
diff --git a/api/audio_codecs/L16/audio_encoder_L16.cc b/api/audio_codecs/L16/audio_encoder_L16.cc
index 507c8d7d26..cab8e2066b 100644
--- a/api/audio_codecs/L16/audio_encoder_L16.cc
+++ b/api/audio_codecs/L16/audio_encoder_L16.cc
@@ -43,7 +43,7 @@ absl::optional<AudioEncoderL16::Config> AudioEncoderL16::SdpToConfig(
 
 void AudioEncoderL16::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  Pcm16BAppendSupportedCodecSpecs(specs);
+  // Pcm16BAppendSupportedCodecSpecs(specs);
 }
 
 AudioCodecInfo AudioEncoderL16::QueryAudioEncoder(
diff --git a/api/audio_codecs/g711/audio_decoder_g711.cc b/api/audio_codecs/g711/audio_decoder_g711.cc
index 57e3741bef..72e88e1079 100644
--- a/api/audio_codecs/g711/audio_decoder_g711.cc
+++ b/api/audio_codecs/g711/audio_decoder_g711.cc
@@ -37,9 +37,9 @@ absl::optional<AudioDecoderG711::Config> AudioDecoderG711::SdpToConfig(
 
 void AudioDecoderG711::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  for (const char* type : {"PCMU", "PCMA"}) {
-    specs->push_back({{type, 8000, 1}, {8000, 1, 64000}});
-  }
+  // for (const char* type : {"PCMU", "PCMA"}) {
+  //   specs->push_back({{type, 8000, 1}, {8000, 1, 64000}});
+  // }
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderG711::MakeAudioDecoder(
diff --git a/api/audio_codecs/g711/audio_encoder_g711.cc b/api/audio_codecs/g711/audio_encoder_g711.cc
index ab95ad45d5..df2d4b39d9 100644
--- a/api/audio_codecs/g711/audio_encoder_g711.cc
+++ b/api/audio_codecs/g711/audio_encoder_g711.cc
@@ -47,9 +47,9 @@ absl::optional<AudioEncoderG711::Config> AudioEncoderG711::SdpToConfig(
 
 void AudioEncoderG711::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  for (const char* type : {"PCMU", "PCMA"}) {
-    specs->push_back({{type, 8000, 1}, {8000, 1, 64000}});
-  }
+  // for (const char* type : {"PCMU", "PCMA"}) {
+  //   specs->push_back({{type, 8000, 1}, {8000, 1, 64000}});
+  // }
 }
 
 AudioCodecInfo AudioEncoderG711::QueryAudioEncoder(const Config& config) {
diff --git a/api/audio_codecs/g722/audio_decoder_g722.cc b/api/audio_codecs/g722/audio_decoder_g722.cc
index 29b6d5da0a..a75882eb62 100644
--- a/api/audio_codecs/g722/audio_decoder_g722.cc
+++ b/api/audio_codecs/g722/audio_decoder_g722.cc
@@ -31,7 +31,7 @@ absl::optional<AudioDecoderG722::Config> AudioDecoderG722::SdpToConfig(
 
 void AudioDecoderG722::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  specs->push_back({{"G722", 8000, 1}, {16000, 1, 64000}});
+  // specs->push_back({{"G722", 8000, 1}, {16000, 1, 64000}});
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderG722::MakeAudioDecoder(
diff --git a/api/audio_codecs/g722/audio_encoder_g722.cc b/api/audio_codecs/g722/audio_encoder_g722.cc
index 12c1746eb7..7104815f39 100644
--- a/api/audio_codecs/g722/audio_encoder_g722.cc
+++ b/api/audio_codecs/g722/audio_encoder_g722.cc
@@ -44,9 +44,9 @@ absl::optional<AudioEncoderG722Config> AudioEncoderG722::SdpToConfig(
 
 void AudioEncoderG722::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  const SdpAudioFormat fmt = {"G722", 8000, 1};
-  const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
-  specs->push_back({fmt, info});
+  // const SdpAudioFormat fmt = {"G722", 8000, 1};
+  // const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
+  // specs->push_back({fmt, info});
 }
 
 AudioCodecInfo AudioEncoderG722::QueryAudioEncoder(
diff --git a/api/audio_codecs/ilbc/audio_decoder_ilbc.cc b/api/audio_codecs/ilbc/audio_decoder_ilbc.cc
index d0aae9044e..85b809a58b 100644
--- a/api/audio_codecs/ilbc/audio_decoder_ilbc.cc
+++ b/api/audio_codecs/ilbc/audio_decoder_ilbc.cc
@@ -28,7 +28,7 @@ absl::optional<AudioDecoderIlbc::Config> AudioDecoderIlbc::SdpToConfig(
 
 void AudioDecoderIlbc::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  specs->push_back({{"ILBC", 8000, 1}, {8000, 1, 13300}});
+  // specs->push_back({{"ILBC", 8000, 1}, {8000, 1, 13300}});
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderIlbc::MakeAudioDecoder(
diff --git a/api/audio_codecs/ilbc/audio_encoder_ilbc.cc b/api/audio_codecs/ilbc/audio_encoder_ilbc.cc
index bd653b7979..429b322fd1 100644
--- a/api/audio_codecs/ilbc/audio_encoder_ilbc.cc
+++ b/api/audio_codecs/ilbc/audio_encoder_ilbc.cc
@@ -59,9 +59,9 @@ absl::optional<AudioEncoderIlbcConfig> AudioEncoderIlbc::SdpToConfig(
 
 void AudioEncoderIlbc::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  const SdpAudioFormat fmt = {"ILBC", 8000, 1};
-  const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
-  specs->push_back({fmt, info});
+  // const SdpAudioFormat fmt = {"ILBC", 8000, 1};
+  // const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
+  // specs->push_back({fmt, info});
 }
 
 AudioCodecInfo AudioEncoderIlbc::QueryAudioEncoder(
diff --git a/api/audio_codecs/isac/audio_decoder_isac_fix.cc b/api/audio_codecs/isac/audio_decoder_isac_fix.cc
index 21d0da37d1..a08473c26e 100644
--- a/api/audio_codecs/isac/audio_decoder_isac_fix.cc
+++ b/api/audio_codecs/isac/audio_decoder_isac_fix.cc
@@ -27,7 +27,7 @@ absl::optional<AudioDecoderIsacFix::Config> AudioDecoderIsacFix::SdpToConfig(
 
 void AudioDecoderIsacFix::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  specs->push_back({{"ISAC", 16000, 1}, {16000, 1, 32000, 10000, 32000}});
+  // specs->push_back({{"ISAC", 16000, 1}, {16000, 1, 32000, 10000, 32000}});
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderIsacFix::MakeAudioDecoder(
diff --git a/api/audio_codecs/isac/audio_decoder_isac_float.cc b/api/audio_codecs/isac/audio_decoder_isac_float.cc
index 4efc2ea9a3..e4768ba401 100644
--- a/api/audio_codecs/isac/audio_decoder_isac_float.cc
+++ b/api/audio_codecs/isac/audio_decoder_isac_float.cc
@@ -32,8 +32,8 @@ AudioDecoderIsacFloat::SdpToConfig(const SdpAudioFormat& format) {
 
 void AudioDecoderIsacFloat::AppendSupportedDecoders(
     std::vector<AudioCodecSpec>* specs) {
-  specs->push_back({{"ISAC", 16000, 1}, {16000, 1, 32000, 10000, 32000}});
-  specs->push_back({{"ISAC", 32000, 1}, {32000, 1, 56000, 10000, 56000}});
+  // specs->push_back({{"ISAC", 16000, 1}, {16000, 1, 32000, 10000, 32000}});
+  // specs->push_back({{"ISAC", 32000, 1}, {32000, 1, 56000, 10000, 56000}});
 }
 
 std::unique_ptr<AudioDecoder> AudioDecoderIsacFloat::MakeAudioDecoder(
diff --git a/api/audio_codecs/isac/audio_encoder_isac_fix.cc b/api/audio_codecs/isac/audio_encoder_isac_fix.cc
index 7bcb78ef5a..f0f8897be6 100644
--- a/api/audio_codecs/isac/audio_encoder_isac_fix.cc
+++ b/api/audio_codecs/isac/audio_encoder_isac_fix.cc
@@ -38,9 +38,9 @@ absl::optional<AudioEncoderIsacFix::Config> AudioEncoderIsacFix::SdpToConfig(
 
 void AudioEncoderIsacFix::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  const SdpAudioFormat fmt = {"ISAC", 16000, 1};
-  const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
-  specs->push_back({fmt, info});
+  // const SdpAudioFormat fmt = {"ISAC", 16000, 1};
+  // const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
+  // specs->push_back({fmt, info});
 }
 
 AudioCodecInfo AudioEncoderIsacFix::QueryAudioEncoder(
diff --git a/api/audio_codecs/isac/audio_encoder_isac_float.cc b/api/audio_codecs/isac/audio_encoder_isac_float.cc
index 6f684c881b..484e33b408 100644
--- a/api/audio_codecs/isac/audio_encoder_isac_float.cc
+++ b/api/audio_codecs/isac/audio_encoder_isac_float.cc
@@ -45,11 +45,11 @@ AudioEncoderIsacFloat::SdpToConfig(const SdpAudioFormat& format) {
 
 void AudioEncoderIsacFloat::AppendSupportedEncoders(
     std::vector<AudioCodecSpec>* specs) {
-  for (int sample_rate_hz : {16000, 32000}) {
-    const SdpAudioFormat fmt = {"ISAC", sample_rate_hz, 1};
-    const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
-    specs->push_back({fmt, info});
-  }
+  // for (int sample_rate_hz : {16000, 32000}) {
+  //   const SdpAudioFormat fmt = {"ISAC", sample_rate_hz, 1};
+  //   const AudioCodecInfo info = QueryAudioEncoder(*SdpToConfig(fmt));
+  //   specs->push_back({fmt, info});
+  // }
 }
 
 AudioCodecInfo AudioEncoderIsacFloat::QueryAudioEncoder(
diff --git a/media/engine/webrtc_voice_engine.cc b/media/engine/webrtc_voice_engine.cc
index 97e12ba9c8..560b2232dc 100644
--- a/media/engine/webrtc_voice_engine.cc
+++ b/media/engine/webrtc_voice_engine.cc
@@ -643,20 +643,20 @@ std::vector<AudioCodec> WebRtcVoiceEngine::CollectCodecs(
             FeedbackParam(kRtcpFbParamTransportCc, kParamValueEmpty));
       }
 
-      if (spec.info.allow_comfort_noise) {
-        // Generate a CN entry if the decoder allows it and we support the
-        // clockrate.
-        auto cn = generate_cn.find(spec.format.clockrate_hz);
-        if (cn != generate_cn.end()) {
-          cn->second = true;
-        }
-      }
-
-      // Generate a telephone-event entry if we support the clockrate.
-      auto dtmf = generate_dtmf.find(spec.format.clockrate_hz);
-      if (dtmf != generate_dtmf.end()) {
-        dtmf->second = true;
-      }
+      // if (spec.info.allow_comfort_noise) {
+      //   // Generate a CN entry if the decoder allows it and we support the
+      //   // clockrate.
+      //   auto cn = generate_cn.find(spec.format.clockrate_hz);
+      //   if (cn != generate_cn.end()) {
+      //     cn->second = true;
+      //   }
+      // }
+
+      // // Generate a telephone-event entry if we support the clockrate.
+      // auto dtmf = generate_dtmf.find(spec.format.clockrate_hz);
+      // if (dtmf != generate_dtmf.end()) {
+      //   dtmf->second = true;
+      // }
 
       out.push_back(codec);
     }
