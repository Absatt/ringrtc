Disable RTP header extensions

Disabling header extensions for both audio and video. This is done to
reduce the attack surface for rtp handling. Generally, any extension
that is experimental is disabled, as well as any that aren't needed for
Signal use cases.

Disabled:
- Playout Delay
- Video Content Type
- Video Timing
- Frame Marking
- Color Space
- Payload Format Restrictions
- Generic Frame Descriptor
- Audio Level
---
 media/engine/webrtc_video_engine.cc |   40 ++++++++++++++++++-----------------
 media/engine/webrtc_voice_engine.cc |   12 +++++------
 2 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/media/engine/webrtc_video_engine.cc b/media/engine/webrtc_video_engine.cc
index a5afcb3fe6..049927891d 100644
--- a/media/engine/webrtc_video_engine.cc
+++ b/media/engine/webrtc_video_engine.cc
@@ -497,28 +497,28 @@ RtpCapabilities WebRtcVideoEngine::GetCapabilities() const {
       webrtc::RtpExtension(webrtc::RtpExtension::kVideoRotationUri, id++));
   capabilities.header_extensions.push_back(webrtc::RtpExtension(
       webrtc::RtpExtension::kTransportSequenceNumberUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kPlayoutDelayUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kVideoContentTypeUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kVideoTimingUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kFrameMarkingUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kColorSpaceUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kPlayoutDelayUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kVideoContentTypeUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kVideoTimingUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kFrameMarkingUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kColorSpaceUri, id++));
   capabilities.header_extensions.push_back(
       webrtc::RtpExtension(webrtc::RtpExtension::kMidUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kRidUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kRepairedRidUri, id++));
-  if (webrtc::field_trial::IsEnabled("WebRTC-GenericDescriptorAdvertised")) {
-    capabilities.header_extensions.push_back(webrtc::RtpExtension(
-        webrtc::RtpExtension::kGenericFrameDescriptorUri00, id++));
-    capabilities.header_extensions.push_back(webrtc::RtpExtension(
-        webrtc::RtpExtension::kGenericFrameDescriptorUri01, id++));
-  }
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kRidUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kRepairedRidUri, id++));
+  // if (webrtc::field_trial::IsEnabled("WebRTC-GenericDescriptorAdvertised")) {
+  //   capabilities.header_extensions.push_back(webrtc::RtpExtension(
+  //       webrtc::RtpExtension::kGenericFrameDescriptorUri00, id++));
+  //   capabilities.header_extensions.push_back(webrtc::RtpExtension(
+  //       webrtc::RtpExtension::kGenericFrameDescriptorUri01, id++));
+  // }
 
   return capabilities;
 }
diff --git a/media/engine/webrtc_voice_engine.cc b/media/engine/webrtc_voice_engine.cc
index 560b2232dc..39db499496 100644
--- a/media/engine/webrtc_voice_engine.cc
+++ b/media/engine/webrtc_voice_engine.cc
@@ -543,18 +543,18 @@ RtpCapabilities WebRtcVoiceEngine::GetCapabilities() const {
   RTC_DCHECK(signal_thread_checker_.IsCurrent());
   RtpCapabilities capabilities;
   int id = 1;
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kAudioLevelUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kAudioLevelUri, id++));
   capabilities.header_extensions.push_back(
       webrtc::RtpExtension(webrtc::RtpExtension::kAbsSendTimeUri, id++));
   capabilities.header_extensions.push_back(webrtc::RtpExtension(
       webrtc::RtpExtension::kTransportSequenceNumberUri, id++));
   capabilities.header_extensions.push_back(
       webrtc::RtpExtension(webrtc::RtpExtension::kMidUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kRidUri, id++));
-  capabilities.header_extensions.push_back(
-      webrtc::RtpExtension(webrtc::RtpExtension::kRepairedRidUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kRidUri, id++));
+  // capabilities.header_extensions.push_back(
+  //     webrtc::RtpExtension(webrtc::RtpExtension::kRepairedRidUri, id++));
   return capabilities;
 }
 
